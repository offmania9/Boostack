<h3>BaseClass</h3>
<section>
    <p><code>BaseClass</code> provides powerful methods to allow your custom classes to use a database table. To start
    using the benefits, your class must extends the <code>BaseClass</code>:</p>
    <pre>
        &lt;?php
            class &lt;Your_Class&gt; extends BaseClass {
                ...
            }
        ?&gt;</pre>
    <p>Then, all you need to do is to declare some pre-defined variables:</p>
    <ul>
        <li>
            <code>protected $attribute1<br> protected $attribute2<br> protected $attribute3</code><br>
            An instance variable for each table attribute (EXCEPT for the ID attribute: it is automatically added)
        </li>
        <li>
            <code>protected $default_values = [<br>
                &nbsp;&nbsp;&nbsp;"attribute1" => "default_value", <br>
                &nbsp;&nbsp;&nbsp;"attribute2" => "default_value",<br>
                &nbsp;&nbsp;&nbsp;...<br>
                ]</code><br>
            An associative array that contains a list of table attributes with its default value (EXCEPT for the ID attribute: it is automatically added)
        </li>
        <li>
            <code>const TABLENAME = "tablename"</code><br>
            A constant that have to contain the name of the table on the database
        </li>
    </ul>
    <p>In the class constructor, you have to invoke the <code>init</code> method of the <code>BaseClass</code>
    and, optionally, it can accept an <code>$id</code> parameter to automatically load the instance with that ID:</p>
    <pre>
        public function __construct($id = NULL) {
            parent::init($id);
        }
    </pre>
    <p>Optionally, you can declare some variables that are not linked with the database table. This kind of variables are excluded from every
        operation that involves database (insert and update).<br>For that, you can declare you custom variable
    and then the <code>$custom_excluded</code> instance variable that must contains all of this attributes name. <br> For example:</p>
    <pre>
        protected $myVar;  // variable not in the database table
        protected $custom_excluded = ["myVar"];
    </pre>

    <h4>Available Methods</h4>
    <ul>
        <li><code>fill($array)</code><br>
        Fill the object with an associative array passed as parameter</li>
        <li><code>clearAndFill($array)</code><br>
        Fill the object with an associative array passed as parameter, ignoring extra attributes contained in the array</li>
        <li><code>load($id)</code><br>
        Load from the database the entry with the ID passed ad parameter</li>
        <li><code>exist($id)</code><br>
        Tell if the entry with the ID passed as paramenter exist in the database</li>
        <li><code>save()</code><br>
        Save the object in the database. If the object is already saved on the database, it will be updated. Otherwise it will be created.<br>
        It's possible to force the ID used on the database table by passing that as an extra parameter to the method (<code>save($id)</code>)</li>
        <li><code>delete()</code><br>
        Delete the entry (if exist) from the database.</li>
        <li><code>lockTable()</code><br>
        Lock every read and write operation on the database table until is invoked the <code>unlockTable()</code> method</li>
        <li><code>unlockTable()</code><br>
        Unlock the database table</li>
    </ul>
</section>
<h3>BaseList</h3>
// TODO