<h3>Users</h3>
<p>To manage user in boostack like create, list, view or edit, you can instance these classes.</p>
<code>User</code><br/>
<p>
    The <code>User</code> class contain other four under instance:<br/>
    <code>User_Entity</code>, <code>User_Social</code>, <code>User_Registration</code>, <code>User_Info</code>.<br/>
    The <code>User</code> class is a Proxy class that provides a modified interface to another class.<br/>
    With <code>User</code> class you have these method:
</p>
<ul>
    <li><code>fill($array)</code><br/>
    The method fill the user object with array of key-value.</li>
    <li><code>load($id)</code><br/>
    This method Assign the ID passed as parameter to the User id and wait for other method to execute.</li>
    <li><code>save($forcedID)</code><br/>
        The method save user data into database by a <code>Transaction</code>. If there is a parameter ID the method invoke the save method of all under instance, otherwise save with incremental id from database and save under instance with the same id.</li>
    <li><code>delete()</code><br/>
    This method is used to remove the user data from the under instance of user object.</li>
    <li><code>jsonSerialize()</code><br/>
    Return an array of User object from under Instance.</li>
    <li><code>User::existById($id, $throwException)</code>
    <br/>Check with id parameter the existence of user on the database.</li>
    <li><code>User::existsByEmail($email, $throwException)</code><br/>
        Check with email parameter the existence of user on the database.</li>
    <li><code>User::existsByUsername($username, $throwException)</code>
        Check with username parameter the existence of user on the database.</li>
    <li><code>User::getUserIDByEmail($email, $throwException)</code>
        Return the User Id from Email parameter.</li>
    <li><code>User::getCredentialByCookie($cookieValue)</code><br/>
    Return username and password by cookie parameter.</li>
    <li><code>User::getActiveCredentialByEmail($email)</code><br/>
    Return id and password by email parameter.</li>
    <li><code>User::getActiveCredentialByUsername($username)</code><br/>
        Return id and password by username parameter.</li>
    <li><code>User::getActiveCredentialByEmailOrUsername($email, $username)</code><br/>
        Return id and password by email or username parameter.</li>
    <li><code>User::getActiveIdByEmailAndPassword($email, $password)</code><br/>
        Return id by email or password parameter.</li>
    <li><code>User::getActiveIdByUsernameAndPassword($username, $password)</code><br/>
        Return id by username or password parameter.</li>
    <li><code>User::getActiveIdByEmailOrUsernameAndPassword($email, $username, $password)</code><br/>
        Return id by email or username or password parameter.</li>
    <li><code>refreshRememberMeCookie()</code><br/>
    set cookie with updated cookie value.</li>
</ul>
<br/>
<code>UserList</code>
<ul>
    <li><code>loadAll()</code><br/>
    Perform all item about user.</li>
    <li><code>view($fields, $orderColumn, $orderType, $numitem, $currentPage)</code><br/>
    View method is used to render a list of user item with filter and pagination.</li>
    <li><code>fill($array, $excludePwd)</code><br/>
    The fill method perform load of a single item and create the user object defined in <code>User</code> class.</li>
    <li><code>getSQLFromJoinPart()</code><br/>
    This method used to perform a join of other table with User main table.</li>
</ul>